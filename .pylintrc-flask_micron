[MASTER]

persistent=no
jobs=1

[MESSAGES CONTROL]

# broad-execpt:
#   I am using a catch-all on Exception, to make sure that all exception
#   that are raised within the execution of a Micron method are caught
#   and sent to the client in a gift-wrapped format.
# deprecated-method:
#   I do use getargsig() in the code for backward compatibility. When
#   available, I do make use of the new inspect.signature() funtionality.
#   This also suppresses other deprecation warnings, but those are
#   also clearly communicated by "python setup.py test".
# too-few-public-methods:
#   I do use classes as pure data containers, without public methods.
# locally-disabled:
#   Some minor issues are suppressed at the file level using pylint hints
#   in the file header. I am not interested in warnings about these.
# no-self-use
#   I am no stranger to writing methods in classes that do not use self.
#   Some like it better when that kind of methods are implemented as
#   functions outside the class. I like it better when a class contains
#   all of its functionality.
disable=broad-except,deprecated-method,too-few-public-methods,locally-disabled,no-self-use

[REPORTS]

output-format=text
files-output=no
reports=no

[VARIABLES]

init-import=no

[MISCELLANEOUS]

notes=TODO

[BASIC]

include-naming-hint=yes

[ELIF]

max-nested-blocks=2

[FORMAT]

max-line-length=80
max-module-lines=1000
indent-string='    '
indent-after-paren=4
expected-line-ending-format=LF

[CLASSES]

exclude-protected=_app_ctx_stack,_data,_get,_parent

[DESIGN]

max-args=5
max-locals=8
max-returns=3
max-branches=5
max-statements=30
max-parents=6
max-attributes=10
min-public-methods=2
max-public-methods=10
max-bool-expr=3
