Every request must use the HTTP POST method
-------------------------------------------

    By not allowing GET requests, it is not possibly to accidentally
    embed sensitive information in URLs.
       
    Although it does not protect us from CSRF-style attacks, it does
    add a nice extra hoop to let an attacker jump through.


Clients must provide a valid CSRF token for CSRF-protected methods
------------------------------------------------------------------

    When CSRF checking is required for the Micron method, the client must
    provide a valid CSRF token through the X-Micron-CSRF-Token header.
    Below you will find how the client gets hold of a valid CSRF token.


The function that is wrapped as a Micron method takes either one argument
or no arguments as input
-------------------------------------------------------------------------

    When a Micron method takes one argument, the data for the argument must
    be provided as JSON data in the POST request body.  It is allowed for a
    client to omit the JSON data, in case the method defines a default
    value for the argument.

    When a Micron method takes no arguments, the client must not provide
    any data in the POST request body.


Clients must provide method input as a JSON-serialized post body
----------------------------------------------------------------

    When the method takes an argument and data is provided by the client,
    Micron will automatically deserialize and normalize the JSON data.


The function that is wrapped as a Micron method is called
---------------------------------------------------------

    Micron will now call the function that is wrapped as a Micron method.
    When input was provided by the client, it is passed to the function
    at this point.


The function performs its magic
-------------------------------

    The function can hand over control back to Micron in one of the
    following ways:

    - Return the output data
    - Raise a ServerError-derived exception
    - Raise a ClientError-derived exception
    - Raise another exception of any kind


Micron sends the output JSON-serialized to the client
-----------------------------------------------------

    Based on the result of the function, Micron sends a result
    to the calling client.

    - When result data was returned, Micron will send a "200 OK" response
      to the client, putting the JSON-serialized result data in the
      response body.

    - When a MicronError (derivate) was raised, a "500 SERVER ERROR" is
      sent to the client, along with the JSON-serialized eror details in
      the response body.

    - When a non-Micron exception was raised, a "500 SERVER ERROR"
      response is sent to the client, using the error code "ServerError",
      along with JSON-serialized error details in the response body.


A new CSRF token is generated and sent along in the response
------------------------------------------------------------

    For all responses, Micron will generate a new CSRF token and
    communicates that to the client through the X-Micron-CSRF-Token
    header in the response.
    
    The client must use this new CSRF token for subsequent requests to
    the server, until a new CSRF token arrives.

    Note that for the CSRF system to work, it must first be bootstrapped.
    By default, a Flask app that is wrapped by Micron will get a method
    named '/ping', which can be used for bootstrapping CSRF. This method
    will not do CSRF checking and will therefore always work.
